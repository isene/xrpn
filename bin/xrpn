#!/usr/bin/env ruby
# encoding: utf-8
#
# SCRIPT INFO 
# Name:       XRPN - eXtended Reverse Polish Notation programming language
# Language:   Pure Ruby, best viewed in VIM
# Author:     Geir Isene <g@isene.com>
# Web_site:   http://isene.com/
# Github:     https://github.com/isene/xrpn
# License:    I release all copyright claims. This code is in the public domain.
#             Permission is granted to use, copy modify, distribute, and sell
#             this software for any purpose. I make no guarantee about the
#             suitability of this software for any purpose and I am not liable
#             for any damages resulting from its use. Further, I am under no
#             obligation to maintain or extend this software. It is provided 
#             on an 'as is' basis without any expressed or implied warranty.

# GET EXTENSIONS
require 'optparse'
require 'io/console'
require 'date'
require 'bigdecimal'
require 'open-uri'
require 'json'
require 'tty-prompt'

$gem = Gem.latest_spec_for("xrpn").gem_dir

# ENSURE DIRs
Dir.mkdir(Dir.home + "/.xrpn") unless File.exist?(Dir.home + "/.xrpn")
["data", "extra", "print", "xcmd", "xlib"].each do |d|
  Dir.mkdir(Dir.home + "/.xrpn/" + d) unless File.exist?(Dir.home + "/.xrpn/" + d)
end

# READ LIBRARY AND COMMANDS
Dir[$gem+"/xlib/*"].each { |file| load file } if $gem   # Read xlib directory from the Gem
Dir[Dir.home+"/.xrpn/xlib/*"].each { |file| load file } # Read xlib directory from home dir
read_xcmd # Read XRPN commands (both from Gem and home dir)

# INITIALIZE VARIABLES
@x, @y, @z, @t, @a = 0, 0, 0, 0, ""

# HANDLE COMMAND LINE OPTIONS
options = {}
optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  opts.banner = "Usage: xrpn [options]"

  # Define the options, and what they do
  opts.on('-e', '--execute string', 'Interpret string as program and run')   { |e| $exe   = e  }
  opts.on('-f', '--file program', 'Specify the file to process')             { |f| $rfile = f  }
  opts.on('-l', '--load program(s)', Array, 'File(s) to load, but not run')  { |l| $lfile = l  }
  opts.on('-s', '--state STATE', 'Load a State file')                        { |s| $sfile = s  }
  opts.on('-c', '--check program', 'Program file to check for errors')       { |c| check(c); exit }
  opts.on('-x', '--X X-value', 'Set initial value in the X register')        { |x| @x = x.to_f }
  opts.on('-y', '--Y Y-value', 'Set initial value in the Y register')        { |y| @y = y.to_f }
  opts.on('-z', '--Z Z-value', 'Set initial value in the Z register')        { |z| @z = z.to_f }
  opts.on('-t', '--T T-value', 'Set initial value in the T register')        { |t| @t = t.to_f }
  opts.on('-a', '--Alpha Alpha-string', 'Set initial string in Alpha')       { |a| @a = a.to_s }
  opts.on('-h', 'Display SHORT help text')                                   { puts opts; exit }
  opts.on('--help', 'Display LONG help text')                     { help; puts; puts opts; exit}
  opts.on('-v', '--version', 'Display the XRPN version number')              { xrpn_version; exit }
end
optparse.parse!

# HANDLE INPUT FROM STDIN (PIPE) OR STRING VIA -e
input = (STDIN.tty?) ? '' : $stdin.read
$exe  = input unless input == ''

# INITIALIZE CLASS
@p = XRPN.new($rfile)

# READ USER CONF
load(Dir.home+'/.xrpn/conf') if File.exist?(Dir.home+'/.xrpn/conf')

# SET VARIABLES FROM OPTPARSE
@p.x, @p.y, @p.z, @p.t, @p.a = @x, @y, @z, @t, @a

# INITIALIZE XRPN PROGRAM
@p.prg[@p.pg] = ["LBL \"XRPN\"", "END"]                 # Put dummy program in page 0 if no file/string to run
@p.prg[@p.pg] = hp_41($exe.split(",")) if $exe          # Read in string as program is supplied by -e/--execute
@p.prg[@p.pg] = hp_41(@p.prg[@p.pg]) if $rfile          # Substitute HP-41 commands with XRPN commands
if $lfile                                               # Read file to load but not run if -l switch is used
  $lfile.each_with_index do |f, i|
    @p.prg[i] = File.read(f).split("\n")
    @p.prg[i] = hp_41(@p.prg[i])
  end
end
@p.prg[@p.pg].push("END") unless @p.prg[@p.pg].last.upcase == "END"

read_state($sfile) if $sfile                            # Read state file in ~.xrpn/ if -s switch is used
$debug = true      if $lfile or $sfile                  # Do not run loaded program or program in state file

# THEME
theme($theme)
load(Dir.home+'/.xrpn/theme') if File.exist?(Dir.home+'/.xrpn/theme') # Override theme if user theme file exists


# THE CORE OF THE RPN PROGRAM
@nl = false # Nolift set to false
@i  = 0     # Counter to prevent infinite loops
@debugprompt = TTY::Prompt.new
until @p.pc == @p.prg[@p.pg].length do
  # Enter debug mode if $debug or $prompt is set, else read next program line
  ($debug or $prompt) ? debug_mode : @line = @p.prg[@p.pg][@p.pc]
  @line = "" if @line == nil
  if @line.match(/^-*[\d\.,e]+$/) # If a number is supplied
    @line.sub!(/,/, '.')
    @p.lift
    @p.x = @line.to_f
    @p.flg["22"] = true  # Number has been entered
    @p.flg["23"] = false
  elsif @line.match(/^>?["'].*["']/) # If an Alpha string is supplied 
    if @line.match(/^["']\|/)
      @p.a += @line.sub(/\|-?/, '').gsub(/\"/, '') # Append to Alpha if "|abc", "|-abc"
    elsif @line.match(/^>["']/)
      @p.a += @line.sub(/>/, '').gsub(/\"/, '')    # Append to Alpha if >"abc"
    else
      @p.a = @line.gsub(/["']/, '') # ...or set Alpha to the supplied string
    end
    @p.flg["22"] = false
    @p.flg["23"] = true  # String has been entered
  else # Split command in maximum three words (e.g. STO IND 13)
    l1, l2, l3 = @line.split[0], @line.split[1], @line.split[2]
    l2 = "%02d" % [l2] if l2 == l2.to_i.to_s
    l3 = "%02d" % [l3] if l3 == l3.to_i.to_s
    l2 = ind(l3) if l3 # If middle word is "IND" (or anything actually - since IND is the only possibility)
    l1 = "" if l1 == nil
    if not $cmd.include?(l1.downcase) # Catch unknown command
      puts "No such command: #{l1}"
      exit if $exe
      @p.stop
    elsif XRPN.method_defined?(l1.downcase) # Or execute the command with either 1 or 2 parts
      begin
        l2 ? ret = @p.send(l1.downcase, l2) : ret = @p.send(l1.downcase)
      rescue ArgumentError
        puts "Command needs an argument."
        @p.stop
      rescue TypeError
        error("ERROR: Wrong type.")
      rescue ZeroDivisionError
        error("ERROR: Division by zero.")
      rescue FloatDomainError
        error("ERROR: Number out of range.")
      rescue Math::DomainError
        error("ERROR: Number out of domain.")
      end
      puts ret if     $debug and ret.instance_of? String
      puts ret if not $debug and ret.to_s.match(/Error:/)
      @p.flg["22"] = false
      @p.flg["23"] = false
    end
  end
  @p.nolift = false if @nl
  @p.nolift ? @nl = true : @nl = false
  @p.pc += 1 unless ($debug or $prompt)
  @i    += 1 unless ($debug or @i < 0) # Handling of potential infinite loops
  if @i > 1000
    puts "Looped 1000 times. Press 'c' to continue indefinitely or any other key to stop."
    ans = STDIN.getch
    ans == "c" ? @i = -1 : $debug = true
  end
end

# vim: set sw=2 sts=2 et ft=ruby fdm=syntax fdn=2 fcs=fold\:\ :
