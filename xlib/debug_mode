def debug_mode
  #prompt = TTY::Prompt.new
  loop do
    if $prompt
      @line = @debugprompt.ask(":")
      break
    else
      puts "â”€" * 30
      @p.prstk
      @line = @debugprompt.ask(">")
      unless @line == nil or @line.length == 1
        @line = hp_41([@line])[0]
        #@line = rxcmd(@line)
      end
    end
    case @line
    when "q" # Quit
      puts "\n"
      exit
    when "Q" # Save and quit
      save_state()
      puts "\n"
      exit
    when /> .*/
      state = @line.sub(/> /, '')
      save_state(state)
    when /< .*/
      state = @line.sub(/< /, '')
      read_state(state)
    when "c"
      system("clear")
    when "C"
      @p.x   = 0.0
      @p.y   = 0.0
      @p.z   = 0.0
      @p.t   = 0.0
      @p.l   = 0.0
      @p.a   = ""
      @p.deg = "deg"
      @p.i   = 4
      @p.s   = 6
      @p.srg = 11
      @p.reg = {}
      @p.flg = {}
      system("clear")
    when "R" # Reload all commands from the cmd directory
      read_xcmd
      puts "Commands reloaded."
    when "l" # Show current line
      @line  = @p.prg[@p.pg][@p.pc]
      puts "Line #{@p.pc + 1}: \"#{@line}\"" # Line 1 is @p.prg[@p.pg][0]
    when "n" # Show next line
      if @p.pc + 1 > @p.prg[@p.pg].length
        puts "End of program"
      else
        @line = @p.prg[@p.pg][@p.pc + 1]
        puts "Line #{@p.pc + 2}: \"#{@line}\"" # Line 1 is @p.prg[@p.pg][0]
      end
    when "p" # Show previous line
      if @p.pc - 1 < 0
        puts "Beginning of program"
      else
        @line  = @p.prg[@p.pg][@p.pc - 1]
        puts "Line #{@p.pc}: \"#{@line}\"" # Line 1 is @p.prg[@p.pg][0]
      end
    when "S" # Go to next line without executing it
      @p.pc += 1
      if @p.pc > @p.prg[@p.pg].length
        puts "End of program"
      else
        @line = @p.prg[@p.pg][@p.pc + 1]
        puts "Line #{@p.pc + 2}: \"#{@line}\"" # Line 1 is @p.prg[@p.pg][0]
      end
    when "s" # Single-step the next program line
      @p.pc += 1
      if @p.pc == @p.prg[@p.pg].length
        @line = "END"
        break
      end
      @line  = @p.prg[@p.pg][@p.pc]
      puts "Line #{@p.pc + 1}: #{@line}" # Line 1 is @p.prg[@p.pg][0]
      $sst   = true
      break
    when "b" # Back-step one line
      @p.pc -= 1 unless @p.pc == 0
    when /^\+\+ /
      @p.prg[@p.pg].insert(@p.pc + 1, @line.sub(/^\+\+ /, ''))
    when "--"
      @p.prg[@p.pg].delete_at(@p.pc)
    when nil # A simple ENTER
      @line = "lift"
      break
    when "r" # End debug mode
      @p.pc += 1
      @line  = @p.prg[@p.pg][@p.pc]
      @line  = "end" if @line == nil
      $debug = false
      $sst   = false
      break unless @p.flg["44"]
    else
      break unless @p.flg["44"]
    end
  end
  $prompt = false
end

 
# vim:ft=ruby:
